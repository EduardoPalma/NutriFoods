// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(NutrifoodsDbContext))]
    partial class NutrifoodsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "diet_name_key")
                        .IsUnique();

                    b.ToTable("diet", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.DishType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "dish_type_name_key")
                        .IsUnique();

                    b.ToTable("dish_type", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ContainsGluten")
                        .HasColumnType("boolean")
                        .HasColumnName("contains_gluten");

                    b.Property<bool>("IsAnimal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_animal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("TertiaryGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("tertiary_group_id");

                    b.HasKey("Id");

                    b.HasIndex("TertiaryGroupId");

                    b.HasIndex(new[] { "Name" }, "ingredient_name_key")
                        .IsUnique();

                    b.ToTable("ingredient", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.IngredientMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Denominator")
                        .HasColumnType("integer")
                        .HasColumnName("denominator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IntegerPart")
                        .HasColumnType("integer")
                        .HasColumnName("integer_part");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<int>("Numerator")
                        .HasColumnType("integer")
                        .HasColumnName("numerator");

                    b.Property<int>("RecipeSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_section_id");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("RecipeSectionId");

                    b.ToTable("ingredient_measure", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.IngredientQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Grams")
                        .HasColumnType("double precision")
                        .HasColumnName("grams");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("RecipeSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_section_id");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeSectionId");

                    b.ToTable("ingredient_quantity", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.MealMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CarbohydratesTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("carbohydrates_total");

                    b.Property<double>("EnergyTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("energy_total");

                    b.Property<double>("LipidsTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("lipids_total");

                    b.Property<int>("MealPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("meal_plan_id");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("meal_type_id");

                    b.Property<double>("ProteinsTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("proteins_total");

                    b.Property<int>("Satiety")
                        .HasColumnType("integer")
                        .HasColumnName("satiety");

                    b.HasKey("Id");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("meal_menu", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.MealMenuRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MealMenuId")
                        .HasColumnType("integer")
                        .HasColumnName("meal_menu_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("MealMenuId");

                    b.HasIndex("RecipeId");

                    b.ToTable("meal_menu_recipe", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CarbohydratesTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("carbohydrates_target");

                    b.Property<double>("EnergyTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("energy_target");

                    b.Property<double>("LipidsTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("lipids_target");

                    b.Property<int>("MealsPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("meals_per_day");

                    b.Property<double>("ProteinsTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("proteins_target");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("meal_plan", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "meal_type_name_key")
                        .IsUnique();

                    b.ToTable("meal_type", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Grams")
                        .HasColumnType("double precision")
                        .HasColumnName("grams");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredient_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IngredientId", "Name" }, "measure_ingredient_id_name_key")
                        .IsUnique();

                    b.ToTable("measure", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlsoCalled")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("also_called");

                    b.Property<int>("Essentiality")
                        .HasColumnType("integer")
                        .HasColumnName("essentiality");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("SubtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subtype_id");

                    b.HasKey("Id");

                    b.HasIndex("SubtypeId");

                    b.HasIndex(new[] { "AlsoCalled" }, "nutrient_also_called_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "nutrient_name_key")
                        .IsUnique();

                    b.ToTable("nutrient", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.NutrientSubtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<bool>("ProvidesEnergy")
                        .HasColumnType("boolean")
                        .HasColumnName("provides_energy");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "Name" }, "nutrient_subtype_name_key")
                        .IsUnique();

                    b.ToTable("nutrient_subtype", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.NutrientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "nutrient_type_name_key")
                        .IsUnique();

                    b.ToTable("nutrient_type", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.PrimaryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "primary_group_name_key")
                        .IsUnique();

                    b.ToTable("primary_group", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("author");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int?>("Portions")
                        .HasColumnType("integer")
                        .HasColumnName("portions");

                    b.Property<int?>("PreparationTime")
                        .HasColumnType("integer")
                        .HasColumnName("preparation_time");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "Author" }, "recipe_name_author_key")
                        .IsUnique();

                    b.ToTable("recipe", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.RecipeDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("integer")
                        .HasColumnName("diet_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipe_diet", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.RecipeDishType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DishTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("dish_type_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("DishTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipe_dish_type", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.RecipeMealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MealTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("meal_type_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipe_meal_type", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.RecipeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "recipe_section_name_key")
                        .IsUnique();

                    b.ToTable("recipe_section", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.RecipeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''::text");

                    b.Property<int>("RecipeSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_section_id");

                    b.Property<int>("Step")
                        .HasColumnType("integer")
                        .HasColumnName("step");

                    b.HasKey("Id");

                    b.HasIndex("RecipeSectionId");

                    b.ToTable("recipe_steps", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.SecondaryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("PrimaryGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("primary_group_id");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGroupId");

                    b.HasIndex(new[] { "Name" }, "secondary_group_name_key")
                        .IsUnique();

                    b.ToTable("secondary_group", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.TertiaryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("SecondaryGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_group_id");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryGroupId");

                    b.HasIndex(new[] { "Name" }, "tertiary_group_name_key")
                        .IsUnique();

                    b.ToTable("tertiary_group", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.UserAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("user_allergy", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.UserBodyMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BodyMassIndex")
                        .HasColumnType("double precision")
                        .HasColumnName("body_mass_index");

                    b.Property<int?>("DietId")
                        .HasColumnType("integer")
                        .HasColumnName("diet_id");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<double?>("MuscleMassPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("muscle_mass_percentage");

                    b.Property<int>("PhysicalActivityLevel")
                        .HasColumnType("integer")
                        .HasColumnName("physical_activity_level");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("UserId");

                    b.ToTable("user_body_metrics", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("joined_on");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "user_profile_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "user_profile_username_key")
                        .IsUnique();

                    b.ToTable("user_profile", "nutrifoods");
                });

            modelBuilder.Entity("Domain.Models.Ingredient", b =>
                {
                    b.HasOne("Domain.Models.TertiaryGroup", "TertiaryGroup")
                        .WithMany("Ingredients")
                        .HasForeignKey("TertiaryGroupId")
                        .IsRequired()
                        .HasConstraintName("ingredient_tertiary_group_id_fkey");

                    b.Navigation("TertiaryGroup");
                });

            modelBuilder.Entity("Domain.Models.IngredientMeasure", b =>
                {
                    b.HasOne("Domain.Models.Measure", "Measure")
                        .WithMany("IngredientMeasures")
                        .HasForeignKey("MeasureId")
                        .IsRequired()
                        .HasConstraintName("ingredient_measure_measure_id_fkey");

                    b.HasOne("Domain.Models.RecipeSection", "RecipeSection")
                        .WithMany("IngredientMeasures")
                        .HasForeignKey("RecipeSectionId")
                        .IsRequired()
                        .HasConstraintName("ingredient_measure_recipe_section_id_fkey");

                    b.Navigation("Measure");

                    b.Navigation("RecipeSection");
                });

            modelBuilder.Entity("Domain.Models.IngredientQuantity", b =>
                {
                    b.HasOne("Domain.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientQuantities")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("ingredient_quantity_ingredient_id_fkey");

                    b.HasOne("Domain.Models.RecipeSection", "RecipeSection")
                        .WithMany("IngredientQuantities")
                        .HasForeignKey("RecipeSectionId")
                        .IsRequired()
                        .HasConstraintName("ingredient_quantity_recipe_section_id_fkey");

                    b.Navigation("Ingredient");

                    b.Navigation("RecipeSection");
                });

            modelBuilder.Entity("Domain.Models.MealMenu", b =>
                {
                    b.HasOne("Domain.Models.MealPlan", "MealPlan")
                        .WithMany("MealMenus")
                        .HasForeignKey("MealPlanId")
                        .IsRequired()
                        .HasConstraintName("meal_menu_meal_plan_id_fkey");

                    b.HasOne("Domain.Models.MealType", "MealType")
                        .WithMany("MealMenus")
                        .HasForeignKey("MealTypeId")
                        .IsRequired()
                        .HasConstraintName("meal_menu_meal_type_id_fkey");

                    b.Navigation("MealPlan");

                    b.Navigation("MealType");
                });

            modelBuilder.Entity("Domain.Models.MealMenuRecipe", b =>
                {
                    b.HasOne("Domain.Models.MealMenu", "MealMenu")
                        .WithMany("MealMenuRecipes")
                        .HasForeignKey("MealMenuId")
                        .IsRequired()
                        .HasConstraintName("meal_menu_recipe_meal_menu_id_fkey");

                    b.HasOne("Domain.Models.Recipe", "Recipe")
                        .WithMany("MealMenuRecipes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("meal_menu_recipe_recipe_id_fkey");

                    b.Navigation("MealMenu");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Domain.Models.MealPlan", b =>
                {
                    b.HasOne("Domain.Models.UserProfile", "User")
                        .WithMany("MealPlans")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("meal_plan_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Measure", b =>
                {
                    b.HasOne("Domain.Models.Ingredient", "Ingredient")
                        .WithMany("Measures")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("measure_ingredient_id_fkey");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Domain.Models.Nutrient", b =>
                {
                    b.HasOne("Domain.Models.NutrientSubtype", "Subtype")
                        .WithMany("Nutrients")
                        .HasForeignKey("SubtypeId")
                        .IsRequired()
                        .HasConstraintName("nutrient_subtype_id_fkey");

                    b.Navigation("Subtype");
                });

            modelBuilder.Entity("Domain.Models.NutrientSubtype", b =>
                {
                    b.HasOne("Domain.Models.NutrientType", "Type")
                        .WithMany("NutrientSubtypes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("nutrient_subtype_type_id_fkey");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.RecipeDiet", b =>
                {
                    b.HasOne("Domain.Models.Diet", "Diet")
                        .WithMany("RecipeDiets")
                        .HasForeignKey("DietId")
                        .IsRequired()
                        .HasConstraintName("recipe_diet_diet_id_fkey");

                    b.HasOne("Domain.Models.Recipe", "Recipe")
                        .WithMany("RecipeDiets")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("recipe_diet_recipe_id_fkey");

                    b.Navigation("Diet");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Domain.Models.RecipeDishType", b =>
                {
                    b.HasOne("Domain.Models.DishType", "DishType")
                        .WithMany("RecipeDishTypes")
                        .HasForeignKey("DishTypeId")
                        .IsRequired()
                        .HasConstraintName("recipe_dish_type_dish_type_id_fkey");

                    b.HasOne("Domain.Models.Recipe", "Recipe")
                        .WithMany("RecipeDishTypes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("recipe_dish_type_recipe_id_fkey");

                    b.Navigation("DishType");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Domain.Models.RecipeMealType", b =>
                {
                    b.HasOne("Domain.Models.MealType", "MealType")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("MealTypeId")
                        .IsRequired()
                        .HasConstraintName("recipe_meal_type_meal_type_id_fkey");

                    b.HasOne("Domain.Models.Recipe", "Recipe")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("recipe_meal_type_recipe_id_fkey");

                    b.Navigation("MealType");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Domain.Models.RecipeSection", b =>
                {
                    b.HasOne("Domain.Models.Recipe", "IdNavigation")
                        .WithOne("RecipeSection")
                        .HasForeignKey("Domain.Models.RecipeSection", "Id")
                        .IsRequired()
                        .HasConstraintName("recipe_section_id_fkey");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Models.RecipeStep", b =>
                {
                    b.HasOne("Domain.Models.RecipeSection", "RecipeSection")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeSectionId")
                        .IsRequired()
                        .HasConstraintName("recipe_steps_recipe_section_id_fkey");

                    b.Navigation("RecipeSection");
                });

            modelBuilder.Entity("Domain.Models.SecondaryGroup", b =>
                {
                    b.HasOne("Domain.Models.PrimaryGroup", "PrimaryGroup")
                        .WithMany("SecondaryGroups")
                        .HasForeignKey("PrimaryGroupId")
                        .IsRequired()
                        .HasConstraintName("secondary_group_primary_group_id_fkey");

                    b.Navigation("PrimaryGroup");
                });

            modelBuilder.Entity("Domain.Models.TertiaryGroup", b =>
                {
                    b.HasOne("Domain.Models.SecondaryGroup", "SecondaryGroup")
                        .WithMany("TertiaryGroups")
                        .HasForeignKey("SecondaryGroupId")
                        .IsRequired()
                        .HasConstraintName("tertiary_group_secondary_group_id_fkey");

                    b.Navigation("SecondaryGroup");
                });

            modelBuilder.Entity("Domain.Models.UserAllergy", b =>
                {
                    b.HasOne("Domain.Models.Ingredient", "Ingredient")
                        .WithMany("UserAllergies")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("user_allergy_ingredient_id_fkey");

                    b.HasOne("Domain.Models.UserProfile", "User")
                        .WithMany("UserAllergies")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_allergy_user_id_fkey");

                    b.Navigation("Ingredient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserBodyMetric", b =>
                {
                    b.HasOne("Domain.Models.Diet", "Diet")
                        .WithMany("UserBodyMetrics")
                        .HasForeignKey("DietId")
                        .HasConstraintName("user_body_metrics_diet_id_fkey");

                    b.HasOne("Domain.Models.UserProfile", "User")
                        .WithMany("UserBodyMetrics")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_body_metrics_user_id_fkey");

                    b.Navigation("Diet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Diet", b =>
                {
                    b.Navigation("RecipeDiets");

                    b.Navigation("UserBodyMetrics");
                });

            modelBuilder.Entity("Domain.Models.DishType", b =>
                {
                    b.Navigation("RecipeDishTypes");
                });

            modelBuilder.Entity("Domain.Models.Ingredient", b =>
                {
                    b.Navigation("IngredientQuantities");

                    b.Navigation("Measures");

                    b.Navigation("UserAllergies");
                });

            modelBuilder.Entity("Domain.Models.MealMenu", b =>
                {
                    b.Navigation("MealMenuRecipes");
                });

            modelBuilder.Entity("Domain.Models.MealPlan", b =>
                {
                    b.Navigation("MealMenus");
                });

            modelBuilder.Entity("Domain.Models.MealType", b =>
                {
                    b.Navigation("MealMenus");

                    b.Navigation("RecipeMealTypes");
                });

            modelBuilder.Entity("Domain.Models.Measure", b =>
                {
                    b.Navigation("IngredientMeasures");
                });

            modelBuilder.Entity("Domain.Models.NutrientSubtype", b =>
                {
                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("Domain.Models.NutrientType", b =>
                {
                    b.Navigation("NutrientSubtypes");
                });

            modelBuilder.Entity("Domain.Models.PrimaryGroup", b =>
                {
                    b.Navigation("SecondaryGroups");
                });

            modelBuilder.Entity("Domain.Models.Recipe", b =>
                {
                    b.Navigation("MealMenuRecipes");

                    b.Navigation("RecipeDiets");

                    b.Navigation("RecipeDishTypes");

                    b.Navigation("RecipeMealTypes");

                    b.Navigation("RecipeSection")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.RecipeSection", b =>
                {
                    b.Navigation("IngredientMeasures");

                    b.Navigation("IngredientQuantities");

                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("Domain.Models.SecondaryGroup", b =>
                {
                    b.Navigation("TertiaryGroups");
                });

            modelBuilder.Entity("Domain.Models.TertiaryGroup", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Navigation("MealPlans");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserBodyMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
